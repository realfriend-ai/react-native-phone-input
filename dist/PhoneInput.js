"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const country_1 = __importDefault(require("./country"));
const flags_1 = __importDefault(require("./resources/flags"));
const phoneNumber_1 = __importDefault(require("./phoneNumber"));
const styles_1 = __importDefault(require("./styles"));
const CountryPicker_1 = __importDefault(require("./CountryPicker"));
class PhoneInput extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.onChangePhoneNumber = (number) => {
            const actionAfterSetState = this.props.onChangePhoneNumber
                ? (displayValue, iso2) => {
                    var _a, _b;
                    (_b = (_a = this.props).onChangePhoneNumber) === null || _b === void 0 ? void 0 : _b.call(_a, displayValue, iso2);
                }
                : null;
            this.updateValue(number, actionAfterSetState);
        };
        this.onPressFlag = () => {
            if (this.props.onPressFlag) {
                this.props.onPressFlag();
            }
            else {
                if (this.state.iso2)
                    this.picker.selectCountry(this.state.iso2);
                this.picker.show();
            }
        };
        // eslint-disable-next-line class-methods-use-this
        this.getFlag = (iso2) => flags_1.default.get(iso2);
        this.getISOCode = () => this.state.iso2;
        this.selectCountry = (iso2) => {
            if (this.state.iso2 !== iso2) {
                const countryData = phoneNumber_1.default.getCountryDataByCode(iso2);
                if (countryData) {
                    this.setState({
                        iso2,
                        displayValue: this.format(''),
                        value: ''
                    }, () => {
                        if (this.props.onSelectCountry)
                            this.props.onSelectCountry(iso2);
                    });
                }
            }
        };
        this.setValue = (number) => {
            if (this.state.value !== number) {
                this.updateValue(number);
            }
        };
        const initialValue = '';
        let { initialCountry } = this.props;
        const { countriesList, disabled, } = this.props;
        if (countriesList) {
            country_1.default.setCustomCountriesData(countriesList);
        }
        let displayValue = '';
        if (initialValue) {
            initialCountry = phoneNumber_1.default.getCountryCodeOfNumber(initialValue);
            displayValue = this.format(initialValue, initialCountry);
        }
        this.state = {
            disabled,
            iso2: initialCountry,
            displayValue,
            value: initialValue,
        };
    }
    static setCustomCountriesData(json) {
        country_1.default.setCustomCountriesData(json);
    }
    componentDidUpdate() {
        const { disabled } = this.props;
        if (disabled !== this.state.disabled) {
            this.setState({ disabled }); // eslint-disable-line react/no-did-update-set-state
        }
    }
    // eslint-disable-next-line class-methods-use-this
    getPickerData() {
        return phoneNumber_1.default.getAllCountries().map((country, index) => ({
            key: index,
            image: flags_1.default.get(country.iso2),
            label: country.name,
            dialCode: `+${country.dialCode}`,
            iso2: country.iso2
        }));
    }
    getCountryCode() {
        const countryData = phoneNumber_1.default.getCountryDataByCode(this.state.iso2);
        return countryData ? countryData.dialCode : null;
    }
    // eslint-disable-next-line class-methods-use-this
    getAllCountries() {
        return phoneNumber_1.default.getAllCountries();
    }
    getDialCode() {
        return phoneNumber_1.default.getDialCode(this.state.value);
    }
    getValue(text) {
        return text ? text.replace(/[^0-9]/g, '') : this.state.value;
    }
    getNumberType() {
        return phoneNumber_1.default.getNumberType(this.state.value, this.state.iso2);
    }
    isValidNumber() {
        if (this.state.value.length < 4)
            return false;
        return phoneNumber_1.default.isValidNumber(this.state.value, this.state.iso2);
    }
    format(text, iso2) {
        return this.props.autoFormat
            ? phoneNumber_1.default.format(text, iso2 || this.state.iso2)
            : text;
    }
    updateValue(number, actionAfterSetState = null) {
        let modifiedNumber = this.getValue(number);
        const { allowZeroAfterCountryCode } = this.props;
        modifiedNumber = allowZeroAfterCountryCode
            ? modifiedNumber
            : this.possiblyEliminateZeroAfterCountryCode(modifiedNumber);
        const iso2 = phoneNumber_1.default.getCountryCodeOfNumber(modifiedNumber) || this.state.iso2;
        const displayValue = modifiedNumber;
        this.setState({
            iso2,
            displayValue,
            value: modifiedNumber,
        }, () => {
            if (actionAfterSetState) {
                actionAfterSetState(displayValue, iso2);
            }
        });
    }
    // eslint-disable-next-line class-methods-use-this
    possiblyEliminateZeroAfterCountryCode(number) {
        const dialCode = phoneNumber_1.default.getDialCode(number);
        return number.startsWith(`${dialCode}0`)
            ? dialCode + number.substr(dialCode.length + 1)
            : number;
    }
    focus() {
        this.inputPhone.focus();
    }
    blur() {
        this.inputPhone.blur();
    }
    render() {
        const { iso2, displayValue, disabled } = this.state;
        const TextComponent = this.props.textComponent || react_native_1.TextInput;
        return (react_1.default.createElement(react_native_1.View, { style: [styles_1.default.container, this.props.style] },
            react_1.default.createElement(react_native_1.TouchableWithoutFeedback, { onPress: this.onPressFlag, disabled: disabled },
                react_1.default.createElement(react_native_1.Image, { source: flags_1.default.get(iso2), style: [styles_1.default.flag, this.props.flagStyle] })),
            react_1.default.createElement(react_native_1.View, { style: { flex: 1, marginLeft: this.props.offset || 10 } },
                react_1.default.createElement(TextComponent, Object.assign({ ref: (ref) => {
                        this.inputPhone = ref;
                    }, editable: !disabled, autoCorrect: false, style: [styles_1.default.text, this.props.textStyle], onChangeText: (text) => {
                        this.onChangePhoneNumber(text);
                    }, keyboardType: "phone-pad", underlineColorAndroid: "rgba(0,0,0,0)", value: displayValue }, this.props.textProps))),
            react_1.default.createElement(CountryPicker_1.default, { ref: (ref) => {
                    this.picker = ref;
                }, selectedCountry: iso2, onSubmit: this.selectCountry, buttonColor: this.props.pickerButtonColor, cancelText: this.props.cancelText, cancelTextStyle: this.props.cancelTextStyle, confirmText: this.props.confirmText, confirmTextStyle: this.props.confirmTextStyle, pickerBackgroundColor: this.props.pickerBackgroundColor, itemStyle: this.props.pickerItemStyle, onPressCancel: this.props.onPressCancel, onPressConfirm: this.props.onPressConfirm })));
    }
}
exports.default = PhoneInput;
//# sourceMappingURL=data:application/json;base64,